{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactItem/ContactItem.module.scss","components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss","components/Section/Section.module.scss","components/Modal/Modal.module.scss","components/Stats/Stats.module.scss","views/ContactsView.module.scss","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Section/Section.js","components/Modal/Modal.js","components/Stats/Stats.js","views/ContactsView.js"],"names":["module","exports","getContacts","state","contacts","items","getFilter","filter","totalContacts","length","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","ContactForm","onSave","useState","setName","number","setNumber","bgColour","setBgColour","useSelector","dispatch","useDispatch","handleChange","e","target","value","reset","nameInputId","nanoid","numberInputId","className","s","form","onSubmit","preventDefault","normalizedName","some","alert","contactsOperations","addContacts","label","htmlFor","labelText","input","type","placeholder","onChange","pattern","title","required","id","Button","style","backgroundColor","onMouseEnter","onMouseLeave","disabled","ContactItem","wrapper","size","fill","onClick","deleteContacts","onDeleteContact","ContactList","useEffect","fetchContacts","list","map","item","Filter","autoComplete","changeFilter","Section","children","section","modalRoot","document","querySelector","Modal","onClose","window","addEventListener","handleKeyDown","removeEventListener","code","createPortal","Overlay","currentTarget","defaultProps","propType","PropTypes","func","Stats","total","text","ContactsView","isModalOpen","setIsModalOpen","toggleModal","Container"],"mappings":"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","file":"static/js/3.a7e6577d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__vHbnD\",\"labelText\":\"ContactForm_labelText__3w7AQ\",\"input\":\"ContactForm_input__2NPBH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ContactItem_wrapper__36-pC\",\"contact\":\"ContactItem_contact__RrAzk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__1s4dm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1DxNo\",\"labelText\":\"Filter_labelText__2DW6w\",\"input\":\"Filter_input__1pEyu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2PGww\",\"title\":\"Section_title__3948U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Modal_Overlay__ukyET\",\"Modal\":\"Modal_Modal__1nJI6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Stats_text__3xeuj\",\"value\":\"Stats_value__V6qau\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ContactsView_wrapper__1Dr-M\"};","import { createSelector } from \"reselect\";\r\n\r\nexport const getContacts = (state) => state.contacts.items;\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const totalContacts = (state) => getContacts(state).length;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n","import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { nanoid } from \"nanoid\";\r\nimport contactsOperations from \"../../redux/contacts/contacts-operations\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getContacts } from \"../../redux/contacts/contacts-selectors\";\r\nimport Button from \"../Button/Button\";\r\nimport s from \"./ContactForm.module.scss\";\r\n\r\nconst ContactForm = ({ onSave }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const [bgColour, setBgColour] = useState(\"#2196f3\");\r\n\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const normalizedName = name.toLowerCase();\r\n    if (\r\n      contacts.some(\r\n        (contact) =>\r\n          contact.name.toLowerCase() === normalizedName ||\r\n          contact.number === number\r\n      )\r\n    ) {\r\n      alert(\r\n        `Contact with such ${name} name or ${number} number is already in Phonebook`\r\n      );\r\n      reset();\r\n      return;\r\n    }\r\n\r\n    dispatch(contactsOperations.addContacts({ name, number }));\r\n    onSave();\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  const nameInputId = nanoid();\r\n  const numberInputId = nanoid();\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <label className={s.label} htmlFor={nameInputId}>\r\n        <span className={s.labelText}>Name</span>\r\n        <input\r\n          className={s.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          placeholder=\"Adrian\"\r\n          onChange={handleChange}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          id={nameInputId}\r\n        />\r\n      </label>\r\n      <label className={s.label} htmlFor={numberInputId}>\r\n        <span className={s.labelText}>Number</span>\r\n        <input\r\n          className={s.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          placeholder=\"123-456-789\"\r\n          onChange={handleChange}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          id={numberInputId}\r\n        />\r\n      </label>\r\n      <Button\r\n        style={{ backgroundColor: `${bgColour}` }}\r\n        type={\"submit\"}\r\n        onMouseEnter={() => setBgColour(\"#008b8b\")}\r\n        onMouseLeave={() => setBgColour(\"#2196f3\")}\r\n        disabled={!name || !number}\r\n      >\r\n        Save Contact\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      namber: PropTypes.number,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default ContactForm;\r\n","import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport contactsOperations from \"../../redux/contacts/contacts-operations\";\r\nimport { BsFillPersonFill } from \"react-icons/bs\";\r\nimport { ImBin } from \"react-icons/im\";\r\nimport Button from \"../Button/Button\";\r\nimport s from \"./ContactItem.module.scss\";\r\n\r\nconst ContactItem = ({ name, number, id }) => {\r\n  const [bgColour, setBgColour] = useState(\"#f08080\");\r\n  const dispatch = useDispatch();\r\n  const onDeleteContact = (id) =>\r\n    dispatch(contactsOperations.deleteContacts(id));\r\n\r\n  return (\r\n    <>\r\n      <div className={s.wrapper}>\r\n        <BsFillPersonFill size=\"28\" fill=\"#87CEEB\" />\r\n        <p className={s.contact}>{name}</p>\r\n        <p className={s.contact}>{number}</p>\r\n      </div>\r\n      <Button\r\n        onClick={() => onDeleteContact(id)}\r\n        style={{ backgroundColor: `${bgColour}` }}\r\n        onMouseEnter={() => setBgColour(\"#e9967a\")}\r\n        onMouseLeave={() => setBgColour(\"#f08080\")}\r\n      >\r\n        <ImBin /> Delete\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nContactItem.propTypes = {\r\n  number: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import PropTypes from \"prop-types\";\r\nimport { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getVisibleContacts } from \"../../redux/contacts/contacts-selectors\";\r\nimport contactsOperations from \"../../redux/contacts/contacts-operations\";\r\nimport ContactItem from \"../ContactItem/ContactItem\";\r\nimport s from \"./ContactList.module.scss\";\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.length > 0 &&\r\n        contacts.map(({ id, name, number }) => (\r\n          <li className={s.item} key={id}>\r\n            <ContactItem name={name} number={number} id={id} />\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default ContactList;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { changeFilter } from \"../../redux/contacts/contacts-actions\";\r\nimport { getFilter } from \"../../redux/contacts/contacts-selectors\";\r\nimport s from \"./Filter.module.scss\";\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label className={s.label}>\r\n      <span className={s.labelText}>Find contacts by name</span>\r\n      <input\r\n        name=\"name\"\r\n        placeholder=\"Leo\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        className={s.input}\r\n        type=\"text\"\r\n        value={value}\r\n        autoComplete=\"off\"\r\n        onChange={(e) => dispatch(changeFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./Section.module.scss\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <div className={s.section}>\r\n    <h2 className={s.title}>{title}</h2>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React, { useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./Modal.module.scss\";\r\n\r\nconst modalRoot = document.querySelector(\"#modal-root\");\r\n\r\nfunction Modal({ onClose, children }) {\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  });\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.code === \"Escape\") {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleBackdropClick = (e) => {\r\n    if (e.currentTarget === e.target) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  return createPortal(\r\n    <div className={s.Overlay} onClick={handleBackdropClick}>\r\n      <div className={s.Modal}>{children}</div>\r\n    </div>,\r\n    modalRoot\r\n  );\r\n}\r\n\r\nModal.defaultProps = {\r\n  onClose: () => null,\r\n};\r\n\r\nModal.propType = {\r\n  onClose: PropTypes.func,\r\n};\r\n\r\nexport default Modal;\r\n","import { useSelector } from \"react-redux\";\r\nimport { totalContacts } from \"../../redux/contacts/contacts-selectors\";\r\nimport s from \"./Stats.module.scss\";\r\n\r\nconst Stats = () => {\r\n  const total = useSelector(totalContacts);\r\n  return (\r\n    <p className={s.text}>\r\n      I have <span className={s.value}>{total}</span> contacts\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default Stats;\r\n","import { useState } from \"react\";\r\nimport Container from \"../components/Container/Container\";\r\nimport ContactForm from \"../components/ContactForm/ContactForm\";\r\nimport ContactList from \"../components/ContactList/ContactList\";\r\nimport Filter from \"../components/Filter/Filter\";\r\nimport Section from \"../components/Section/Section\";\r\nimport Modal from \"../components/Modal/Modal\";\r\nimport Stats from \"../components/Stats/Stats\";\r\nimport { ImUserPlus } from \"react-icons/im\";\r\nimport Button from \"../components/Button/Button\";\r\nimport s from \"./ContactsView.module.scss\";\r\n\r\nconst ContactsView = () => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [bgColour, setBgColour] = useState(\"#2196f3\");\r\n\r\n  const toggleModal = () => setIsModalOpen((state) => !state);\r\n\r\n  return (\r\n    <Container>\r\n      {isModalOpen && (\r\n        <Modal onClose={toggleModal}>\r\n          <Section title=\"New Contact\">\r\n            <ContactForm onSave={toggleModal} />\r\n          </Section>\r\n        </Modal>\r\n      )}\r\n      <Section title=\"My Contacts List\">\r\n        <div className={s.wrapper}>\r\n          <Button\r\n            onClick={toggleModal}\r\n            style={{ backgroundColor: `${bgColour}` }}\r\n            onMouseEnter={() => setBgColour(\"#008b8b\")}\r\n            onMouseLeave={() => setBgColour(\"#2196f3\")}\r\n          >\r\n            <ImUserPlus /> Add Contact\r\n          </Button>\r\n          <Stats />\r\n        </div>\r\n        <Filter />\r\n        <ContactList />\r\n      </Section>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ContactsView;\r\n"],"sourceRoot":""}